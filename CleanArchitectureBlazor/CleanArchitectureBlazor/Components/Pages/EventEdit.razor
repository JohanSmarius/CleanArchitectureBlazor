@page "/events/edit/{EventId:int}"
@using CleanArchitectureBlazor.Models
@using CleanArchitectureBlazor.Services
@inject IEventService EventService
@inject IShiftService ShiftService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Edit Event - Medical First Aid Manager</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (eventToEdit == null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col">
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Event Not Found</strong>
                    <p class="mb-0">The requested event could not be found.</p>
                </div>
                <a href="/events" class="btn btn-primary">
                    <i class="fas fa-arrow-left me-2"></i>Back to Events
                </a>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a href="/events" class="text-decoration-none">Events</a>
                        </li>
                        <li class="breadcrumb-item">
                            <a href="/events/details/@eventToEdit.Id" class="text-decoration-none">@eventToEdit.Name</a>
                        </li>
                        <li class="breadcrumb-item active" aria-current="page">Edit</li>
                    </ol>
                </nav>
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0 text-primary">
                            <i class="fas fa-edit me-2"></i>Edit Event
                        </h1>
                        <p class="text-muted mb-0">@eventToEdit.Name</p>
                    </div>
                    <div class="btn-group" role="group">
                        <button class="btn btn-outline-secondary" @onclick="Cancel">
                            <i class="fas fa-times me-2"></i>Cancel
                        </button>
                        <button class="btn btn-primary" @onclick="SaveEvent" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="fas fa-save me-2"></i>Save Changes
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Event Edit Form -->
            <div class="col-lg-8 mb-4">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-calendar-edit me-2"></i>Event Details
                        </h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="editForm" OnValidSubmit="SaveEvent">
                            <DataAnnotationsValidator />
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Event Name *</label>
                                    <InputText @bind-Value="editForm.Name" class="form-control" placeholder="Enter event name" />
                                    <ValidationMessage For="() => editForm.Name" class="text-danger" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Location *</label>
                                    <InputText @bind-Value="editForm.Location" class="form-control" placeholder="Enter event location" />
                                    <ValidationMessage For="() => editForm.Location" class="text-danger" />
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Start Date & Time *</label>
                                    <input type="datetime-local" @bind="editForm.StartDate" class="form-control" />
                                    <ValidationMessage For="() => editForm.StartDate" class="text-danger" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">End Date & Time *</label>
                                    <input type="datetime-local" @bind="editForm.EndDate" class="form-control" />
                                    <ValidationMessage For="() => editForm.EndDate" class="text-danger" />
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Status *</label>
                                    <InputSelect @bind-Value="editForm.Status" class="form-select">
                                        <option value="@EventStatus.Requested">Requested</option>
                                        <option value="@EventStatus.Planned">Planned</option>
                                        <option value="@EventStatus.Active">Active</option>
                                        <option value="@EventStatus.Completed">Completed</option>
                                        <option value="@EventStatus.Cancelled">Cancelled</option>
                                    </InputSelect>
                                    <ValidationMessage For="() => editForm.Status" class="text-danger" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Contact Person</label>
                                    <InputText @bind-Value="editForm.ContactPerson" class="form-control" placeholder="Enter contact person name" />
                                    <ValidationMessage For="() => editForm.ContactPerson" class="text-danger" />
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Contact Phone</label>
                                    <InputText @bind-Value="editForm.ContactPhone" class="form-control" placeholder="Enter contact phone number" />
                                    <ValidationMessage For="() => editForm.ContactPhone" class="text-danger" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <InputTextArea @bind-Value="editForm.Description" class="form-control" rows="4" placeholder="Enter event description (optional)" />
                                <ValidationMessage For="() => editForm.Description" class="text-danger" />
                            </div>

                            @if (eventToEdit.Shifts.Any())
                            {
                                <div class="alert alert-warning">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    <strong>Note:</strong> This event has @eventToEdit.Shifts.Count shift(s) assigned. 
                                    Changing dates and times may affect existing shifts and staff assignments.
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(validationError))
                            {
                                <div class="alert alert-danger">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    @validationError
                                </div>
                            }
                        </EditForm>
                    </div>
                </div>
            </div>

            <!-- Event Information & Actions -->
            <div class="col-lg-4">
                <!-- Current Event Info -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-info text-white">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-info-circle me-2"></i>Current Event Info
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label text-muted small">ORIGINAL DATES</label>
                            <div class="fw-medium">
                                <i class="fas fa-calendar text-muted me-2"></i>
                                @eventToEdit.StartDate.ToString("MMM dd, yyyy HH:mm")
                                <br>
                                <small class="text-muted">to @eventToEdit.EndDate.ToString("MMM dd, yyyy HH:mm")</small>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label text-muted small">DURATION</label>
                            <div class="fw-medium">
                                <i class="fas fa-hourglass-half text-muted me-2"></i>
                                @CalculateDuration()
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label text-muted small">CURRENT STATUS</label>
                            <div>
                                <span class="badge bg-@GetEventStatusColor(eventToEdit.Status) fs-6">
                                    @eventToEdit.Status
                                </span>
                            </div>
                        </div>

                        <div class="mb-0">
                            <label class="form-label text-muted small">LAST UPDATED</label>
                            <div class="fw-medium">
                                <i class="fas fa-clock text-muted me-2"></i>
                                @(eventToEdit.UpdatedAt?.ToString("MMM dd, yyyy HH:mm") ?? eventToEdit.CreatedAt.ToString("MMM dd, yyyy HH:mm"))
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Statistics -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-success text-white">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-chart-bar me-2"></i>Event Statistics
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-6">
                                <div class="border-end">
                                    <h4 class="text-primary mb-0">@eventToEdit.Shifts.Count</h4>
                                    <small class="text-muted">Total Shifts</small>
                                </div>
                            </div>
                            <div class="col-6">
                                <h4 class="text-success mb-0">@TotalRequiredStaff</h4>
                                <small class="text-muted">Required Staff</small>
                            </div>
                        </div>
                        <hr>
                        <div class="row text-center">
                            <div class="col-6">
                                <h5 class="text-info mb-0">@TotalAssignedStaff</h5>
                                <small class="text-muted">Assigned Staff</small>
                            </div>
                            <div class="col-6">
                                <h5 class="text-warning mb-0">@(TotalRequiredStaff - TotalAssignedStaff)</h5>
                                <small class="text-muted">Still Needed</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-bolt me-2"></i>Quick Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <a href="/events/details/@eventToEdit.Id" class="btn btn-outline-primary">
                                <i class="fas fa-eye me-2"></i>View Details
                            </a>
                            <button class="btn btn-outline-success" @onclick="CreateShift">
                                <i class="fas fa-plus me-2"></i>Add Shift
                            </button>
                            <button class="btn btn-outline-info" @onclick="ManageShifts">
                                <i class="fas fa-cogs me-2"></i>Manage Shifts
                            </button>
                            @if (eventToEdit.Status != EventStatus.Cancelled)
                            {
                                <button class="btn btn-outline-danger" @onclick="ConfirmCancelEvent">
                                    <i class="fas fa-times-circle me-2"></i>Cancel Event
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Shifts Summary -->
        @if (eventToEdit.Shifts.Any())
        {
            <div class="row mt-4">
                <div class="col">
                    <div class="card border-0 shadow-sm">
                        <div class="card-header bg-transparent border-0">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-clock me-2"></i>Associated Shifts (@eventToEdit.Shifts.Count)
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover align-middle">
                                    <thead class="table-light">
                                        <tr>
                                            <th scope="col">Shift Name</th>
                                            <th scope="col">Date & Time</th>
                                            <th scope="col">Staff</th>
                                            <th scope="col">Status</th>
                                            <th scope="col" class="text-center">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var shift in eventToEdit.Shifts.OrderBy(s => s.StartTime))
                                        {
                                            <tr>
                                                <td>
                                                    <div class="fw-medium">@shift.Name</div>
                                                    @if (!string.IsNullOrEmpty(shift.Description))
                                                    {
                                                        <small class="text-muted">
                                                            @(shift.Description.Length > 40 ? shift.Description.Substring(0, 40) + "..." : shift.Description)
                                                        </small>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="fw-medium">@shift.StartTime.ToString("MMM dd, HH:mm")</span>
                                                    <br>
                                                    <small class="text-muted">to @shift.EndTime.ToString("MMM dd, HH:mm")</small>
                                                </td>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <span class="fw-medium me-2">@shift.StaffAssignments.Count / @shift.RequiredStaff</span>
                                                        @if (shift.StaffAssignments.Count == shift.RequiredStaff)
                                                        {
                                                            <span class="badge bg-success">Full</span>
                                                        }
                                                        else if (shift.StaffAssignments.Count > 0)
                                                        {
                                                            <span class="badge bg-warning">Partial</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-danger">Empty</span>
                                                        }
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge bg-@GetShiftStatusColor(shift.Status)">
                                                        @shift.Status
                                                    </span>
                                                </td>
                                                <td class="text-center">
                                                    <div class="btn-group btn-group-sm" role="group">
                                                        <a href="/shifts/edit/@shift.Id" class="btn btn-outline-primary" title="Edit Shift">
                                                            <i class="fas fa-edit"></i>
                                                        </a>
                                                        <a href="/shifts/details/@shift.Id" class="btn btn-outline-info" title="View Details">
                                                            <i class="fas fa-eye"></i>
                                                        </a>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<!-- Cancel Event Confirmation Modal -->
@if (showCancelConfirm)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5); z-index: 1055;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Event Cancellation</h5>
                    <button type="button" class="btn-close" @onclick="CancelEventCancellation"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to cancel the event "<strong>@eventToEdit?.Name</strong>"?</p>
                    <p class="text-warning small">
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        This will set the event status to "Cancelled" but will preserve all shifts and assignments for record keeping.
                        Staff members will need to be notified separately.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelEventCancellation">No, Keep Event</button>
                    <button type="button" class="btn btn-danger" @onclick="CancelEvent" disabled="@isCancelling">
                        @if (isCancelling)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Yes, Cancel Event
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int EventId { get; set; }

    private bool isLoading = true;
    private bool isSaving = false;
    private bool isCancelling = false;
    private bool showCancelConfirm = false;
    private Event? eventToEdit;
    private Event editForm = new();
    private string validationError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadEventDetails();
        isLoading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (isLoading) return;
        await LoadEventDetails();
    }

    private async Task LoadEventDetails()
    {
        eventToEdit = await EventService.GetEventByIdAsync(EventId);
        if (eventToEdit != null)
        {
            // Create a copy for editing
            editForm = new Event
            {
                Id = eventToEdit.Id,
                Name = eventToEdit.Name,
                StartDate = eventToEdit.StartDate,
                EndDate = eventToEdit.EndDate,
                Location = eventToEdit.Location,
                Description = eventToEdit.Description,
                Status = eventToEdit.Status,
                ContactPerson = eventToEdit.ContactPerson,
                ContactPhone = eventToEdit.ContactPhone,
                CreatedAt = eventToEdit.CreatedAt,
                UpdatedAt = eventToEdit.UpdatedAt
            };
        }
    }

    private async Task SaveEvent()
    {
        if (eventToEdit == null) return;

        isSaving = true;
        validationError = string.Empty;
        
        try
        {
            // Validate dates
            if (editForm.StartDate >= editForm.EndDate)
            {
                validationError = "End date must be after start date.";
                return;
            }

            // Check if date changes affect existing shifts
            if (eventToEdit.Shifts.Any() && 
                (editForm.StartDate != eventToEdit.StartDate || editForm.EndDate != eventToEdit.EndDate))
            {
                var conflictingShifts = eventToEdit.Shifts.Where(s => 
                    s.StartTime < editForm.StartDate || s.EndTime > editForm.EndDate).ToList();
                
                if (conflictingShifts.Any())
                {
                    validationError = $"Cannot change event dates. {conflictingShifts.Count} shift(s) would fall outside the new event timeframe.";
                    return;
                }
            }

            await EventService.UpdateEventAsync(editForm);
            
            // Navigate back to event details
            Navigation.NavigateTo($"/events/details/{EventId}");
        }
        catch (Exception ex)
        {
            validationError = $"Error saving event: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/events/details/{EventId}");
    }

    private void CreateShift()
    {
        Navigation.NavigateTo($"/events/details/{EventId}");
        // The details page will handle opening the create shift dialog
    }

    private void ManageShifts()
    {
        Navigation.NavigateTo($"/events/details/{EventId}");
    }

    private void ConfirmCancelEvent()
    {
        showCancelConfirm = true;
        StateHasChanged();
    }

    private void CancelEventCancellation()
    {
        showCancelConfirm = false;
        StateHasChanged();
    }

    private async Task CancelEvent()
    {
        if (eventToEdit == null) return;

        isCancelling = true;
        try
        {
            editForm.Status = EventStatus.Cancelled;
            await EventService.UpdateEventAsync(editForm);
            
            // Reload to get updated data
            await LoadEventDetails();
            showCancelConfirm = false;
        }
        catch (Exception ex)
        {
            validationError = $"Error cancelling event: {ex.Message}";
        }
        finally
        {
            isCancelling = false;
            StateHasChanged();
        }
    }

    private string CalculateDuration()
    {
        if (eventToEdit == null) return "";
        var duration = eventToEdit.EndDate - eventToEdit.StartDate;
        if (duration.TotalDays >= 1)
        {
            return $"{duration.Days} day(s), {duration.Hours} hour(s)";
        }
        return $"{duration.Hours} hour(s), {duration.Minutes} minute(s)";
    }

    private int TotalRequiredStaff => eventToEdit?.Shifts.Sum(s => s.RequiredStaff) ?? 0;

    private int TotalAssignedStaff => eventToEdit?.Shifts.Sum(s => s.StaffAssignments.Count) ?? 0;

    private string GetEventStatusColor(EventStatus status)
    {
        return status switch
        {
            EventStatus.Requested => "warning",
            EventStatus.Planned => "primary",
            EventStatus.Active => "success",
            EventStatus.Completed => "secondary",
            EventStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }

    private string GetShiftStatusColor(ShiftStatus status)
    {
        return status switch
        {
            ShiftStatus.Open => "primary",
            ShiftStatus.Full => "info",
            ShiftStatus.InProgress => "success",
            ShiftStatus.Completed => "secondary",
            ShiftStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }
}